// Generated by delombok at Sat Feb 08 23:15:03 CET 2014
/*
 * Copyright 2012, 2013 Martijn van de Rijdt 
 * 
 * This file is part of the Ultimate Marvel vs Capcom 3 Replay Manager.
 * 
 * The Ultimate Marvel vs Capcom 3 Replay Manager is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * The Ultimate Marvel vs Capcom 3 Replay Manager is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with the Ultimate Marvel vs Capcom 3
 * Replay Manager. If not, see <http://www.gnu.org/licenses/>.
 */
package nl.mvdr.umvc3replayanalyser.video;

import java.awt.image.BufferedImage;
import lombok.NonNull;
import nl.mvdr.umvc3replayanalyser.model.Game;

/**
 * Container for a game and the corresponding versus screen.
 *
 * @author Martijn van de Rijdt
 */
public class GameAndVersusScreen {
    
    /**
     * Game.
     */
    @NonNull
    private final Game game;
    
    /**
     * Versus screen.
     */
    @NonNull
    private final BufferedImage versusScreen;

    @java.beans.ConstructorProperties({"game", "versusScreen"})
    @java.lang.SuppressWarnings("all")
    GameAndVersusScreen(@NonNull final Game game, @NonNull final BufferedImage versusScreen) {
        if (game == null) {
            throw new java.lang.NullPointerException("game");
        }
        if (versusScreen == null) {
            throw new java.lang.NullPointerException("versusScreen");
        }
        this.game = game;
        this.versusScreen = versusScreen;
    }

    /**
     * Game.
     */
    @NonNull
    @java.lang.SuppressWarnings("all")
    public Game getGame() {
        return this.game;
    }

    /**
     * Versus screen.
     */
    @NonNull
    @java.lang.SuppressWarnings("all")
    public BufferedImage getVersusScreen() {
        return this.versusScreen;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public java.lang.String toString() {
        return "GameAndVersusScreen(game=" + this.getGame() + ", versusScreen=" + this.getVersusScreen() + ")";
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof GameAndVersusScreen)) return false;
        final GameAndVersusScreen other = (GameAndVersusScreen)o;
        if (!other.canEqual((java.lang.Object)this)) return false;
        final java.lang.Object this$game = this.getGame();
        final java.lang.Object other$game = other.getGame();
        if (this$game == null ? other$game != null : !this$game.equals(other$game)) return false;
        final java.lang.Object this$versusScreen = this.getVersusScreen();
        final java.lang.Object other$versusScreen = other.getVersusScreen();
        if (this$versusScreen == null ? other$versusScreen != null : !this$versusScreen.equals(other$versusScreen)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    public boolean canEqual(final java.lang.Object other) {
        return other instanceof GameAndVersusScreen;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 277;
        int result = 1;
        final java.lang.Object $game = this.getGame();
        result = result * PRIME + ($game == null ? 0 : $game.hashCode());
        final java.lang.Object $versusScreen = this.getVersusScreen();
        result = result * PRIME + ($versusScreen == null ? 0 : $versusScreen.hashCode());
        return result;
    }
}