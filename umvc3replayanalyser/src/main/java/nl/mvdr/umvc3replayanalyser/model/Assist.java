// Generated by delombok at Sat Feb 08 23:15:03 CET 2014
/*
 * Copyright 2012, 2013 Martijn van de Rijdt 
 * 
 * This file is part of the Ultimate Marvel vs Capcom 3 Replay Manager.
 * 
 * The Ultimate Marvel vs Capcom 3 Replay Manager is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * The Ultimate Marvel vs Capcom 3 Replay Manager is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with the Ultimate Marvel vs Capcom 3
 * Replay Manager. If not, see <http://www.gnu.org/licenses/>.
 */
package nl.mvdr.umvc3replayanalyser.model;

import lombok.NonNull;

/**
 * Representation of an assist for a specific character. * * @author Martijn van de Rijdt
 */
public class Assist {
    
    /**
     * Assist type.
     */
    @NonNull
    private final AssistType type;
    
    /**
     * Assist character.
     */
    @NonNull
    private final Umvc3Character character;
    
    /**
     * Gets the assist type, while handling null values.     *     * @param assist     * assist, may be null     * @return assist type, or null if the given assist is null
     */
    public static AssistType getType(Assist assist) {
        AssistType result;
        if (assist == null) {
            result = null;
        } else {
            result = assist.getType();
        }
        return result;
    }
    
    /**
     * @return name of the assist
     */
    public String getName() {
        return character.getAssistName(type);
    }
    
    /**
     * {@inheritDoc}
     */
    @Override
    public String toString() {
        return getName();
    }
    
    @java.beans.ConstructorProperties({"type", "character"})
    @java.lang.SuppressWarnings("all")
    public Assist(@NonNull final AssistType type, @NonNull final Umvc3Character character) {
        if (type == null) {
            throw new java.lang.NullPointerException("type");
        }
        if (character == null) {
            throw new java.lang.NullPointerException("character");
        }
        this.type = type;
        this.character = character;
    }
    
    /**
     * Assist type.
     */
    @NonNull
    @java.lang.SuppressWarnings("all")
    public AssistType getType() {
        return this.type;
    }
    
    /**
     * Assist character.
     */
    @NonNull
    @java.lang.SuppressWarnings("all")
    public Umvc3Character getCharacter() {
        return this.character;
    }
    
    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof Assist)) return false;
        final Assist other = (Assist)o;
        if (!other.canEqual((java.lang.Object)this)) return false;
        final java.lang.Object this$type = this.getType();
        final java.lang.Object other$type = other.getType();
        if (this$type == null ? other$type != null : !this$type.equals(other$type)) return false;
        final java.lang.Object this$character = this.getCharacter();
        final java.lang.Object other$character = other.getCharacter();
        if (this$character == null ? other$character != null : !this$character.equals(other$character)) return false;
        return true;
    }
    
    @java.lang.SuppressWarnings("all")
    public boolean canEqual(final java.lang.Object other) {
        return other instanceof Assist;
    }
    
    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    public int hashCode() {
        final int PRIME = 277;
        int result = 1;
        final java.lang.Object $type = this.getType();
        result = result * PRIME + ($type == null ? 0 : $type.hashCode());
        final java.lang.Object $character = this.getCharacter();
        result = result * PRIME + ($character == null ? 0 : $character.hashCode());
        return result;
    }
}